%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: file
-module(opentelemetry_zipkin_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_zipkin_span.Kind'/1, 'enum_value_by_symbol_zipkin_span.Kind'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("opentelemetry_zipkin_pb.hrl").

%% enumerated types
-type 'zipkin_span.Kind'() :: 'SPAN_KIND_UNSPECIFIED' | 'CLIENT' | 'SERVER' | 'PRODUCER' | 'CONSUMER'.
-export_type(['zipkin_span.Kind'/0]).

%% message types
-type zipkin_span() :: #zipkin_span{}.

-type zipkin_endpoint() :: #zipkin_endpoint{}.

-type zipkin_annotation() :: #zipkin_annotation{}.

-type zipkin_list_of_spans() :: #zipkin_list_of_spans{}.

-type zipkin_report_response() :: #zipkin_report_response{}.

-export_type(['zipkin_span'/0, 'zipkin_endpoint'/0, 'zipkin_annotation'/0, 'zipkin_list_of_spans'/0, 'zipkin_report_response'/0]).
-type '$msg_name'() :: zipkin_span | zipkin_endpoint | zipkin_annotation | zipkin_list_of_spans | zipkin_report_response.
-type '$msg'() :: zipkin_span() | zipkin_endpoint() | zipkin_annotation() | zipkin_list_of_spans() | zipkin_report_response().
-export_type(['$msg_name'/0, '$msg'/0]).

-record('map<string,string>',{key, value}).
-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        zipkin_span -> encode_msg_zipkin_span(id(Msg, TrUserData), TrUserData);
        zipkin_endpoint -> encode_msg_zipkin_endpoint(id(Msg, TrUserData), TrUserData);
        zipkin_annotation -> encode_msg_zipkin_annotation(id(Msg, TrUserData), TrUserData);
        zipkin_list_of_spans -> encode_msg_zipkin_list_of_spans(id(Msg, TrUserData), TrUserData);
        zipkin_report_response -> encode_msg_zipkin_report_response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_zipkin_span(Msg, TrUserData) -> encode_msg_zipkin_span(Msg, <<>>, TrUserData).


encode_msg_zipkin_span(#zipkin_span{trace_id = F1, parent_id = F2, id = F3, kind = F4, name = F5, timestamp = F6, duration = F7, local_endpoint = F8, remote_endpoint = F9, annotations = F10, tags = F11, debug = F12, shared = F13}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 'SPAN_KIND_UNSPECIFIED'; TrF4 =:= 0 -> B3;
                       true -> 'e_enum_zipkin_span.Kind'(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case is_empty_string(TrF5) of
                        true -> B4;
                        false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if TrF6 =:= 0 -> B5;
                       true -> e_type_fixed64(TrF6, <<B5/binary, 49>>, TrUserData)
                    end
                end
         end,
    B7 = if F7 == undefined -> B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if TrF7 =:= 0 -> B6;
                       true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                    end
                end
         end,
    B8 = if F8 == undefined -> B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if TrF8 =:= undefined -> B7;
                       true -> e_mfield_zipkin_span_local_endpoint(TrF8, <<B7/binary, 66>>, TrUserData)
                    end
                end
         end,
    B9 = if F9 == undefined -> B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if TrF9 =:= undefined -> B8;
                       true -> e_mfield_zipkin_span_remote_endpoint(TrF9, <<B8/binary, 74>>, TrUserData)
                    end
                end
         end,
    B10 = begin
              TrF10 = id(F10, TrUserData),
              if TrF10 == [] -> B9;
                 true -> e_field_zipkin_span_annotations(TrF10, B9, TrUserData)
              end
          end,
    B11 = begin
              TrF11 = id(F11, TrUserData),
              if TrF11 == [] -> B10;
                 true -> e_field_zipkin_span_tags(TrF11, B10, TrUserData)
              end
          end,
    B12 = if F12 == undefined -> B11;
             true ->
                 begin
                     TrF12 = id(F12, TrUserData),
                     if TrF12 =:= false -> B11;
                        true -> e_type_bool(TrF12, <<B11/binary, 96>>, TrUserData)
                     end
                 end
          end,
    if F13 == undefined -> B12;
       true ->
           begin
               TrF13 = id(F13, TrUserData),
               if TrF13 =:= false -> B12;
                  true -> e_type_bool(TrF13, <<B12/binary, 104>>, TrUserData)
               end
           end
    end.

encode_msg_zipkin_endpoint(Msg, TrUserData) -> encode_msg_zipkin_endpoint(Msg, <<>>, TrUserData).


encode_msg_zipkin_endpoint(#zipkin_endpoint{service_name = F1, ipv4 = F2, ipv6 = F3, port = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= 0 -> B3;
                  true -> e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
               end
           end
    end.

encode_msg_zipkin_annotation(Msg, TrUserData) -> encode_msg_zipkin_annotation(Msg, <<>>, TrUserData).


encode_msg_zipkin_annotation(#zipkin_annotation{timestamp = F1, value = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_zipkin_list_of_spans(Msg, TrUserData) -> encode_msg_zipkin_list_of_spans(Msg, <<>>, TrUserData).


encode_msg_zipkin_list_of_spans(#zipkin_list_of_spans{spans = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_zipkin_list_of_spans_spans(TrF1, Bin, TrUserData)
        end
    end.

encode_msg_zipkin_report_response(_Msg, _TrUserData) -> <<>>.

e_mfield_zipkin_span_local_endpoint(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_zipkin_endpoint(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_zipkin_span_remote_endpoint(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_zipkin_endpoint(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_zipkin_span_annotations(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_zipkin_annotation(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_zipkin_span_annotations([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_zipkin_span_annotations(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_zipkin_span_annotations(Rest, Bin3, TrUserData);
e_field_zipkin_span_annotations([], Bin, _TrUserData) -> Bin.

e_mfield_zipkin_span_tags(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_zipkin_span_tags([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_mfield_zipkin_span_tags('tr_encode_zipkin_span.tags[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_zipkin_span_tags(Rest, Bin3, TrUserData);
e_field_zipkin_span_tags([], Bin, _TrUserData) -> Bin.

e_mfield_zipkin_list_of_spans_spans(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_zipkin_span(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_zipkin_list_of_spans_spans([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_zipkin_list_of_spans_spans(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_zipkin_list_of_spans_spans(Rest, Bin3, TrUserData);
e_field_zipkin_list_of_spans_spans([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,string>'(#'map<string,string>'{key = F1, value = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

'e_enum_zipkin_span.Kind'('SPAN_KIND_UNSPECIFIED', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_zipkin_span.Kind'('CLIENT', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_zipkin_span.Kind'('SERVER', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_zipkin_span.Kind'('PRODUCER', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_zipkin_span.Kind'('CONSUMER', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_zipkin_span.Kind'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(zipkin_span, Bin, TrUserData) -> id(decode_msg_zipkin_span(Bin, TrUserData), TrUserData);
decode_msg_2_doit(zipkin_endpoint, Bin, TrUserData) -> id(decode_msg_zipkin_endpoint(Bin, TrUserData), TrUserData);
decode_msg_2_doit(zipkin_annotation, Bin, TrUserData) -> id(decode_msg_zipkin_annotation(Bin, TrUserData), TrUserData);
decode_msg_2_doit(zipkin_list_of_spans, Bin, TrUserData) -> id(decode_msg_zipkin_list_of_spans(Bin, TrUserData), TrUserData);
decode_msg_2_doit(zipkin_report_response, Bin, TrUserData) -> id(decode_msg_zipkin_report_response(Bin, TrUserData), TrUserData).



decode_msg_zipkin_span(Bin, TrUserData) ->
    dfp_read_field_def_zipkin_span(Bin,
                                   0,
                                   0,
                                   0,
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id('SPAN_KIND_UNSPECIFIED', TrUserData),
                                   id(<<>>, TrUserData),
                                   id(0, TrUserData),
                                   id(0, TrUserData),
                                   id(undefined, TrUserData),
                                   id(undefined, TrUserData),
                                   id([], TrUserData),
                                   'tr_decode_init_default_zipkin_span.tags'([], TrUserData),
                                   id(false, TrUserData),
                                   id(false, TrUserData),
                                   TrUserData).

dfp_read_field_def_zipkin_span(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_trace_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_parent_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_kind(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<49, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_duration(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<66, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_local_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<74, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_remote_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<82, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_annotations(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<90, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_tags(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<96, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_debug(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<104, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_zipkin_span_shared(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_zipkin_span(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1, R2, F@_12, F@_13, TrUserData) ->
    #zipkin_span{trace_id = F@_1, parent_id = F@_2, id = F@_3, kind = F@_4, name = F@_5, timestamp = F@_6, duration = F@_7, local_endpoint = F@_8, remote_endpoint = F@_9, annotations = lists_reverse(R1, TrUserData),
                 tags = 'tr_decode_repeated_finalize_zipkin_span.tags'(R2, TrUserData), debug = F@_12, shared = F@_13};
dfp_read_field_def_zipkin_span(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_zipkin_span(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_zipkin_span(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_zipkin_span(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_zipkin_span(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_zipkin_span_trace_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        18 -> d_field_zipkin_span_parent_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        26 -> d_field_zipkin_span_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        32 -> d_field_zipkin_span_kind(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        42 -> d_field_zipkin_span_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        49 -> d_field_zipkin_span_timestamp(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        56 -> d_field_zipkin_span_duration(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        66 -> d_field_zipkin_span_local_endpoint(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        74 -> d_field_zipkin_span_remote_endpoint(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        82 -> d_field_zipkin_span_annotations(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        90 -> d_field_zipkin_span_tags(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        96 -> d_field_zipkin_span_debug(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        104 -> d_field_zipkin_span_shared(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_zipkin_span(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                1 -> skip_64_zipkin_span(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                2 -> skip_length_delimited_zipkin_span(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                3 -> skip_group_zipkin_span(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                5 -> skip_32_zipkin_span(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
            end
    end;
dg_read_field_def_zipkin_span(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1, R2, F@_12, F@_13, TrUserData) ->
    #zipkin_span{trace_id = F@_1, parent_id = F@_2, id = F@_3, kind = F@_4, name = F@_5, timestamp = F@_6, duration = F@_7, local_endpoint = F@_8, remote_endpoint = F@_9, annotations = lists_reverse(R1, TrUserData),
                 tags = 'tr_decode_repeated_finalize_zipkin_span.tags'(R2, TrUserData), debug = F@_12, shared = F@_13}.

d_field_zipkin_span_trace_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_trace_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_trace_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_parent_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_parent_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_parent_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_kind(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_kind(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_kind(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_zipkin_span.Kind'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_timestamp(<<Value:64/little, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_zipkin_span(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, id(Value, TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_duration(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_duration(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_duration(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_local_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_local_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_local_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_zipkin_endpoint(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF,
                                   0,
                                   0,
                                   F,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_zipkin_endpoint(Prev, NewFValue, TrUserData)
                                   end,
                                   F@_9,
                                   F@_10,
                                   F@_11,
                                   F@_12,
                                   F@_13,
                                   TrUserData).

d_field_zipkin_span_remote_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_remote_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_remote_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_zipkin_endpoint(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF,
                                   0,
                                   0,
                                   F,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_zipkin_endpoint(Prev, NewFValue, TrUserData)
                                   end,
                                   F@_10,
                                   F@_11,
                                   F@_12,
                                   F@_13,
                                   TrUserData).

d_field_zipkin_span_annotations(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_annotations(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_annotations(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, Prev, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_zipkin_annotation(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, cons(NewFValue, Prev, TrUserData), F@_11, F@_12, F@_13, TrUserData).

d_field_zipkin_span_tags(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_tags(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_tags(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, Prev, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<string,string>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, 'tr_decode_repeated_add_elem_zipkin_span.tags'(NewFValue, Prev, TrUserData), F@_12, F@_13, TrUserData).

d_field_zipkin_span_debug(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_debug(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_debug(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, TrUserData).

d_field_zipkin_span_shared(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_zipkin_span_shared(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_zipkin_span_shared(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_zipkin_span(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, TrUserData).

skip_varint_zipkin_span(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_zipkin_span(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_varint_zipkin_span(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_zipkin_span(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_zipkin_span(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    skip_length_delimited_zipkin_span(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_length_delimited_zipkin_span(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_zipkin_span(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_group_zipkin_span(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_zipkin_span(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_32_zipkin_span(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_zipkin_span(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_64_zipkin_span(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_zipkin_span(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

decode_msg_zipkin_endpoint(Bin, TrUserData) -> dfp_read_field_def_zipkin_endpoint(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_zipkin_endpoint(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_zipkin_endpoint_service_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_zipkin_endpoint(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_zipkin_endpoint_ipv4(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_zipkin_endpoint(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_zipkin_endpoint_ipv6(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_zipkin_endpoint(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_zipkin_endpoint_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_zipkin_endpoint(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #zipkin_endpoint{service_name = F@_1, ipv4 = F@_2, ipv6 = F@_3, port = F@_4};
dfp_read_field_def_zipkin_endpoint(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_zipkin_endpoint(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_zipkin_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_zipkin_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_zipkin_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_zipkin_endpoint_service_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_zipkin_endpoint_ipv4(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_zipkin_endpoint_ipv6(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_zipkin_endpoint_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_zipkin_endpoint(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_zipkin_endpoint(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_zipkin_endpoint(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_zipkin_endpoint(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_zipkin_endpoint(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_zipkin_endpoint(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #zipkin_endpoint{service_name = F@_1, ipv4 = F@_2, ipv6 = F@_3, port = F@_4}.

d_field_zipkin_endpoint_service_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_zipkin_endpoint_service_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_zipkin_endpoint_service_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_endpoint(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_zipkin_endpoint_ipv4(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_zipkin_endpoint_ipv4(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_zipkin_endpoint_ipv4(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_endpoint(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_zipkin_endpoint_ipv6(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_zipkin_endpoint_ipv6(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_zipkin_endpoint_ipv6(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_endpoint(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_zipkin_endpoint_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_zipkin_endpoint_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_zipkin_endpoint_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_zipkin_endpoint(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_zipkin_endpoint(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_zipkin_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_zipkin_endpoint(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_zipkin_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_zipkin_endpoint(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_zipkin_endpoint(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_zipkin_endpoint(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_zipkin_endpoint(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_zipkin_endpoint(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_zipkin_endpoint(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_zipkin_endpoint(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_zipkin_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_zipkin_endpoint(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_zipkin_endpoint(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_zipkin_annotation(Bin, TrUserData) -> dfp_read_field_def_zipkin_annotation(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_zipkin_annotation(<<9, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_zipkin_annotation_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_zipkin_annotation(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_zipkin_annotation_value(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_zipkin_annotation(<<>>, 0, 0, _, F@_1, F@_2, _) -> #zipkin_annotation{timestamp = F@_1, value = F@_2};
dfp_read_field_def_zipkin_annotation(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_zipkin_annotation(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_zipkin_annotation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_zipkin_annotation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_zipkin_annotation(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        9 -> d_field_zipkin_annotation_timestamp(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_zipkin_annotation_value(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_zipkin_annotation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_zipkin_annotation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_zipkin_annotation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_zipkin_annotation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_zipkin_annotation(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_zipkin_annotation(<<>>, 0, 0, _, F@_1, F@_2, _) -> #zipkin_annotation{timestamp = F@_1, value = F@_2}.

d_field_zipkin_annotation_timestamp(<<Value:64/little, Rest/binary>>, Z1, Z2, F, _, F@_2, TrUserData) -> dfp_read_field_def_zipkin_annotation(Rest, Z1, Z2, F, id(Value, TrUserData), F@_2, TrUserData).

d_field_zipkin_annotation_value(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_zipkin_annotation_value(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_zipkin_annotation_value(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_annotation(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_zipkin_annotation(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_zipkin_annotation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_zipkin_annotation(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_zipkin_annotation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_zipkin_annotation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_zipkin_annotation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_zipkin_annotation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_zipkin_annotation(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_zipkin_annotation(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_zipkin_annotation(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_zipkin_annotation(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_zipkin_annotation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_zipkin_annotation(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_zipkin_annotation(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_zipkin_list_of_spans(Bin, TrUserData) -> dfp_read_field_def_zipkin_list_of_spans(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_zipkin_list_of_spans(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_zipkin_list_of_spans_spans(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_zipkin_list_of_spans(<<>>, 0, 0, _, R1, TrUserData) -> #zipkin_list_of_spans{spans = lists_reverse(R1, TrUserData)};
dfp_read_field_def_zipkin_list_of_spans(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_zipkin_list_of_spans(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_zipkin_list_of_spans(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_zipkin_list_of_spans(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_zipkin_list_of_spans(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_zipkin_list_of_spans_spans(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_zipkin_list_of_spans(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_zipkin_list_of_spans(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_zipkin_list_of_spans(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_zipkin_list_of_spans(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_zipkin_list_of_spans(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_zipkin_list_of_spans(<<>>, 0, 0, _, R1, TrUserData) -> #zipkin_list_of_spans{spans = lists_reverse(R1, TrUserData)}.

d_field_zipkin_list_of_spans_spans(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_zipkin_list_of_spans_spans(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_zipkin_list_of_spans_spans(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_zipkin_span(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_zipkin_list_of_spans(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_zipkin_list_of_spans(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_zipkin_list_of_spans(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_zipkin_list_of_spans(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_zipkin_list_of_spans(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_zipkin_list_of_spans(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_zipkin_list_of_spans(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_zipkin_list_of_spans(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_zipkin_list_of_spans(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_zipkin_list_of_spans(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_zipkin_list_of_spans(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_zipkin_list_of_spans(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_zipkin_list_of_spans(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_zipkin_list_of_spans(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_zipkin_list_of_spans(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_zipkin_report_response(Bin, TrUserData) -> dfp_read_field_def_zipkin_report_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_zipkin_report_response(<<>>, 0, 0, _, _) -> #zipkin_report_response{};
dfp_read_field_def_zipkin_report_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_zipkin_report_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_zipkin_report_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_zipkin_report_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_zipkin_report_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_zipkin_report_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_zipkin_report_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_zipkin_report_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_zipkin_report_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_zipkin_report_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_zipkin_report_response(<<>>, 0, 0, _, _) -> #zipkin_report_response{}.

skip_varint_zipkin_report_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_zipkin_report_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_zipkin_report_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_zipkin_report_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_zipkin_report_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_zipkin_report_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_zipkin_report_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_zipkin_report_response(Rest2, 0, 0, F, TrUserData).

skip_group_zipkin_report_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_zipkin_report_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_zipkin_report_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_zipkin_report_response(Rest, Z1, Z2, F, TrUserData).

skip_64_zipkin_report_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_zipkin_report_response(Rest, Z1, Z2, F, TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) -> 'dfp_read_field_def_map<string,string>'(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_map<string,string>'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,string>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<string,string>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,string>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<string,string>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<string,string>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_map<string,string>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_map<string,string>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<string,string>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'map<string,string>'{key = F@_1, value = F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,string>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<string,string>_value'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<string,string>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'd_enum_zipkin_span.Kind'(0) -> 'SPAN_KIND_UNSPECIFIED';
'd_enum_zipkin_span.Kind'(1) -> 'CLIENT';
'd_enum_zipkin_span.Kind'(2) -> 'SERVER';
'd_enum_zipkin_span.Kind'(3) -> 'PRODUCER';
'd_enum_zipkin_span.Kind'(4) -> 'CONSUMER';
'd_enum_zipkin_span.Kind'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        zipkin_span -> merge_msg_zipkin_span(Prev, New, TrUserData);
        zipkin_endpoint -> merge_msg_zipkin_endpoint(Prev, New, TrUserData);
        zipkin_annotation -> merge_msg_zipkin_annotation(Prev, New, TrUserData);
        zipkin_list_of_spans -> merge_msg_zipkin_list_of_spans(Prev, New, TrUserData);
        zipkin_report_response -> merge_msg_zipkin_report_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_zipkin_span/3}).
merge_msg_zipkin_span(#zipkin_span{trace_id = PFtrace_id, parent_id = PFparent_id, id = PFid, kind = PFkind, name = PFname, timestamp = PFtimestamp, duration = PFduration, local_endpoint = PFlocal_endpoint, remote_endpoint = PFremote_endpoint,
                                   annotations = PFannotations, tags = PFtags, debug = PFdebug, shared = PFshared},
                      #zipkin_span{trace_id = NFtrace_id, parent_id = NFparent_id, id = NFid, kind = NFkind, name = NFname, timestamp = NFtimestamp, duration = NFduration, local_endpoint = NFlocal_endpoint, remote_endpoint = NFremote_endpoint, annotations = NFannotations,
                                   tags = NFtags, debug = NFdebug, shared = NFshared},
                      TrUserData) ->
    #zipkin_span{trace_id =
                     if NFtrace_id =:= undefined -> PFtrace_id;
                        true -> NFtrace_id
                     end,
                 parent_id =
                     if NFparent_id =:= undefined -> PFparent_id;
                        true -> NFparent_id
                     end,
                 id =
                     if NFid =:= undefined -> PFid;
                        true -> NFid
                     end,
                 kind =
                     if NFkind =:= undefined -> PFkind;
                        true -> NFkind
                     end,
                 name =
                     if NFname =:= undefined -> PFname;
                        true -> NFname
                     end,
                 timestamp =
                     if NFtimestamp =:= undefined -> PFtimestamp;
                        true -> NFtimestamp
                     end,
                 duration =
                     if NFduration =:= undefined -> PFduration;
                        true -> NFduration
                     end,
                 local_endpoint =
                     if PFlocal_endpoint /= undefined, NFlocal_endpoint /= undefined -> merge_msg_zipkin_endpoint(PFlocal_endpoint, NFlocal_endpoint, TrUserData);
                        PFlocal_endpoint == undefined -> NFlocal_endpoint;
                        NFlocal_endpoint == undefined -> PFlocal_endpoint
                     end,
                 remote_endpoint =
                     if PFremote_endpoint /= undefined, NFremote_endpoint /= undefined -> merge_msg_zipkin_endpoint(PFremote_endpoint, NFremote_endpoint, TrUserData);
                        PFremote_endpoint == undefined -> NFremote_endpoint;
                        NFremote_endpoint == undefined -> PFremote_endpoint
                     end,
                 annotations =
                     if PFannotations /= undefined, NFannotations /= undefined -> 'erlang_++'(PFannotations, NFannotations, TrUserData);
                        PFannotations == undefined -> NFannotations;
                        NFannotations == undefined -> PFannotations
                     end,
                 tags =
                     if PFtags /= undefined, NFtags /= undefined -> 'tr_merge_zipkin_span.tags'(PFtags, NFtags, TrUserData);
                        PFtags == undefined -> NFtags;
                        NFtags == undefined -> PFtags
                     end,
                 debug =
                     if NFdebug =:= undefined -> PFdebug;
                        true -> NFdebug
                     end,
                 shared =
                     if NFshared =:= undefined -> PFshared;
                        true -> NFshared
                     end}.

-compile({nowarn_unused_function,merge_msg_zipkin_endpoint/3}).
merge_msg_zipkin_endpoint(#zipkin_endpoint{service_name = PFservice_name, ipv4 = PFipv4, ipv6 = PFipv6, port = PFport}, #zipkin_endpoint{service_name = NFservice_name, ipv4 = NFipv4, ipv6 = NFipv6, port = NFport}, _) ->
    #zipkin_endpoint{service_name =
                         if NFservice_name =:= undefined -> PFservice_name;
                            true -> NFservice_name
                         end,
                     ipv4 =
                         if NFipv4 =:= undefined -> PFipv4;
                            true -> NFipv4
                         end,
                     ipv6 =
                         if NFipv6 =:= undefined -> PFipv6;
                            true -> NFipv6
                         end,
                     port =
                         if NFport =:= undefined -> PFport;
                            true -> NFport
                         end}.

-compile({nowarn_unused_function,merge_msg_zipkin_annotation/3}).
merge_msg_zipkin_annotation(#zipkin_annotation{timestamp = PFtimestamp, value = PFvalue}, #zipkin_annotation{timestamp = NFtimestamp, value = NFvalue}, _) ->
    #zipkin_annotation{timestamp =
                           if NFtimestamp =:= undefined -> PFtimestamp;
                              true -> NFtimestamp
                           end,
                       value =
                           if NFvalue =:= undefined -> PFvalue;
                              true -> NFvalue
                           end}.

-compile({nowarn_unused_function,merge_msg_zipkin_list_of_spans/3}).
merge_msg_zipkin_list_of_spans(#zipkin_list_of_spans{spans = PFspans}, #zipkin_list_of_spans{spans = NFspans}, TrUserData) ->
    #zipkin_list_of_spans{spans =
                              if PFspans /= undefined, NFspans /= undefined -> 'erlang_++'(PFspans, NFspans, TrUserData);
                                 PFspans == undefined -> NFspans;
                                 NFspans == undefined -> PFspans
                              end}.

-compile({nowarn_unused_function,merge_msg_zipkin_report_response/3}).
merge_msg_zipkin_report_response(_Prev, New, _TrUserData) -> New.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        zipkin_span -> v_msg_zipkin_span(Msg, [MsgName], TrUserData);
        zipkin_endpoint -> v_msg_zipkin_endpoint(Msg, [MsgName], TrUserData);
        zipkin_annotation -> v_msg_zipkin_annotation(Msg, [MsgName], TrUserData);
        zipkin_list_of_spans -> v_msg_zipkin_list_of_spans(Msg, [MsgName], TrUserData);
        zipkin_report_response -> v_msg_zipkin_report_response(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_submsg_zipkin_span/3}).
-dialyzer({nowarn_function,v_submsg_zipkin_span/3}).
v_submsg_zipkin_span(Msg, Path, TrUserData) -> v_msg_zipkin_span(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_zipkin_span/3}).
-dialyzer({nowarn_function,v_msg_zipkin_span/3}).
v_msg_zipkin_span(#zipkin_span{trace_id = F1, parent_id = F2, id = F3, kind = F4, name = F5, timestamp = F6, duration = F7, local_endpoint = F8, remote_endpoint = F9, annotations = F10, tags = F11, debug = F12, shared = F13}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [trace_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [parent_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> 'v_enum_zipkin_span.Kind'(F4, [kind | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [name | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_fixed64(F6, [timestamp | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [duration | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_submsg_zipkin_endpoint(F8, [local_endpoint | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_submsg_zipkin_endpoint(F9, [remote_endpoint | Path], TrUserData)
    end,
    if is_list(F10) ->
           _ = [v_submsg_zipkin_annotation(Elem, [annotations | Path], TrUserData) || Elem <- F10],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, zipkin_annotation}}, F10, [annotations | Path])
    end,
    'v_map<string,string>'(F11, [tags | Path], TrUserData),
    if F12 == undefined -> ok;
       true -> v_type_bool(F12, [debug | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_bool(F13, [shared | Path], TrUserData)
    end,
    ok;
v_msg_zipkin_span(X, Path, _TrUserData) -> mk_type_error({expected_msg, zipkin_span}, X, Path).

-compile({nowarn_unused_function,v_submsg_zipkin_endpoint/3}).
-dialyzer({nowarn_function,v_submsg_zipkin_endpoint/3}).
v_submsg_zipkin_endpoint(Msg, Path, TrUserData) -> v_msg_zipkin_endpoint(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_zipkin_endpoint/3}).
-dialyzer({nowarn_function,v_msg_zipkin_endpoint/3}).
v_msg_zipkin_endpoint(#zipkin_endpoint{service_name = F1, ipv4 = F2, ipv6 = F3, port = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [service_name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [ipv4 | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [ipv6 | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [port | Path], TrUserData)
    end,
    ok;
v_msg_zipkin_endpoint(X, Path, _TrUserData) -> mk_type_error({expected_msg, zipkin_endpoint}, X, Path).

-compile({nowarn_unused_function,v_submsg_zipkin_annotation/3}).
-dialyzer({nowarn_function,v_submsg_zipkin_annotation/3}).
v_submsg_zipkin_annotation(Msg, Path, TrUserData) -> v_msg_zipkin_annotation(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_zipkin_annotation/3}).
-dialyzer({nowarn_function,v_msg_zipkin_annotation/3}).
v_msg_zipkin_annotation(#zipkin_annotation{timestamp = F1, value = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_fixed64(F1, [timestamp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path], TrUserData)
    end,
    ok;
v_msg_zipkin_annotation(X, Path, _TrUserData) -> mk_type_error({expected_msg, zipkin_annotation}, X, Path).

-compile({nowarn_unused_function,v_msg_zipkin_list_of_spans/3}).
-dialyzer({nowarn_function,v_msg_zipkin_list_of_spans/3}).
v_msg_zipkin_list_of_spans(#zipkin_list_of_spans{spans = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_submsg_zipkin_span(Elem, [spans | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, zipkin_span}}, F1, [spans | Path])
    end,
    ok;
v_msg_zipkin_list_of_spans(X, Path, _TrUserData) -> mk_type_error({expected_msg, zipkin_list_of_spans}, X, Path).

-compile({nowarn_unused_function,v_msg_zipkin_report_response/3}).
-dialyzer({nowarn_function,v_msg_zipkin_report_response/3}).
v_msg_zipkin_report_response(#zipkin_report_response{}, _Path, _) -> ok;
v_msg_zipkin_report_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, zipkin_report_response}, X, Path).

-compile({nowarn_unused_function,'v_enum_zipkin_span.Kind'/3}).
-dialyzer({nowarn_function,'v_enum_zipkin_span.Kind'/3}).
'v_enum_zipkin_span.Kind'('SPAN_KIND_UNSPECIFIED', _Path, _TrUserData) -> ok;
'v_enum_zipkin_span.Kind'('CLIENT', _Path, _TrUserData) -> ok;
'v_enum_zipkin_span.Kind'('SERVER', _Path, _TrUserData) -> ok;
'v_enum_zipkin_span.Kind'('PRODUCER', _Path, _TrUserData) -> ok;
'v_enum_zipkin_span.Kind'('CONSUMER', _Path, _TrUserData) -> ok;
'v_enum_zipkin_span.Kind'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_zipkin_span.Kind'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'zipkin_span.Kind'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when is_integer(N), -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 18446744073709551615 -> ok;
v_type_fixed64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, fixed64, unsigned, 64}, N, Path);
v_type_fixed64(X, Path, _TrUserData) -> mk_type_error({bad_integer, fixed64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, TrUserData) when is_list(KVs) ->
    [case X of
         {Key, Value} ->
             v_type_string(Key, [key | Path], TrUserData),
             v_type_string(Value, [value | Path], TrUserData);
         _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) -> mk_type_error(invalid_list_of_key_value_tuples, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_zipkin_span.tags'/2}).
'tr_decode_init_default_zipkin_span.tags'(_, _) -> mt_empty_map_r().

-compile({inline,'tr_merge_zipkin_span.tags'/3}).
'tr_merge_zipkin_span.tags'(X1, X2, _) -> mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_zipkin_span.tags'/2}).
'tr_decode_repeated_finalize_zipkin_span.tags'(L, _) -> mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_zipkin_span.tags'/3}).
'tr_decode_repeated_add_elem_zipkin_span.tags'(Elem, L, _) -> mt_add_item_r(Elem, L).

-compile({inline,'tr_encode_zipkin_span.tags[x]'/2}).
'tr_encode_zipkin_span.tags[x]'(X, _) -> mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) -> {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> [].

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, Acc) -> [{K, V} | Acc].


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(Acc) -> mt_finalize_items_r_aux(lists:reverse(Acc), dict:new()).

mt_finalize_items_r_aux([{K, V} | Tl], D) -> mt_finalize_items_r_aux(Tl, dict:store(K, V, D));
mt_finalize_items_r_aux([], D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) -> dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end, dict:from_list(L1), dict:from_list(L2))).




get_msg_defs() ->
    [{{enum, 'zipkin_span.Kind'}, [{'SPAN_KIND_UNSPECIFIED', 0}, {'CLIENT', 1}, {'SERVER', 2}, {'PRODUCER', 3}, {'CONSUMER', 4}]},
     {{msg, zipkin_span},
      [[{name, trace_id}, {fnum, 1}, {rnum, 2}, {type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, parent_id}, {fnum, 2}, {rnum, 3}, {type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, id}, {fnum, 3}, {rnum, 4}, {type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, kind}, {fnum, 4}, {rnum, 5}, {type, {enum, 'zipkin_span.Kind'}}, {occurrence, optional}, {opts, []}],
       [{name, name}, {fnum, 5}, {rnum, 6}, {type, string}, {occurrence, optional}, {opts, []}],
       [{name, timestamp}, {fnum, 6}, {rnum, 7}, {type, fixed64}, {occurrence, optional}, {opts, []}],
       [{name, duration}, {fnum, 7}, {rnum, 8}, {type, uint64}, {occurrence, optional}, {opts, []}],
       [{name, local_endpoint}, {fnum, 8}, {rnum, 9}, {type, {msg, zipkin_endpoint}}, {occurrence, optional}, {opts, []}],
       [{name, remote_endpoint}, {fnum, 9}, {rnum, 10}, {type, {msg, zipkin_endpoint}}, {occurrence, optional}, {opts, []}],
       [{name, annotations}, {fnum, 10}, {rnum, 11}, {type, {msg, zipkin_annotation}}, {occurrence, repeated}, {opts, []}],
       [{name, tags}, {fnum, 11}, {rnum, 12}, {type, {map, string, string}}, {occurrence, repeated}, {opts, []}],
       [{name, debug}, {fnum, 12}, {rnum, 13}, {type, bool}, {occurrence, optional}, {opts, []}],
       [{name, shared}, {fnum, 13}, {rnum, 14}, {type, bool}, {occurrence, optional}, {opts, []}]]},
     {{msg, zipkin_endpoint},
      [[{name, service_name}, {fnum, 1}, {rnum, 2}, {type, string}, {occurrence, optional}, {opts, []}],
       [{name, ipv4}, {fnum, 2}, {rnum, 3}, {type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, ipv6}, {fnum, 3}, {rnum, 4}, {type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, port}, {fnum, 4}, {rnum, 5}, {type, int32}, {occurrence, optional}, {opts, []}]]},
     {{msg, zipkin_annotation}, [[{name, timestamp}, {fnum, 1}, {rnum, 2}, {type, fixed64}, {occurrence, optional}, {opts, []}], [{name, value}, {fnum, 2}, {rnum, 3}, {type, string}, {occurrence, optional}, {opts, []}]]},
     {{msg, zipkin_list_of_spans}, [[{name, spans}, {fnum, 1}, {rnum, 2}, {type, {msg, zipkin_span}}, {occurrence, repeated}, {opts, []}]]},
     {{msg, zipkin_report_response}, []}].


get_msg_names() -> [zipkin_span, zipkin_endpoint, zipkin_annotation, zipkin_list_of_spans, zipkin_report_response].


get_group_names() -> [].


get_msg_or_group_names() -> [zipkin_span, zipkin_endpoint, zipkin_annotation, zipkin_list_of_spans, zipkin_report_response].


get_enum_names() -> ['zipkin_span.Kind'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(zipkin_span) ->
    [[{name, trace_id}, {fnum, 1}, {rnum, 2}, {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, parent_id}, {fnum, 2}, {rnum, 3}, {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, id}, {fnum, 3}, {rnum, 4}, {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, kind}, {fnum, 4}, {rnum, 5}, {type, {enum, 'zipkin_span.Kind'}}, {occurrence, optional}, {opts, []}],
     [{name, name}, {fnum, 5}, {rnum, 6}, {type, string}, {occurrence, optional}, {opts, []}],
     [{name, timestamp}, {fnum, 6}, {rnum, 7}, {type, fixed64}, {occurrence, optional}, {opts, []}],
     [{name, duration}, {fnum, 7}, {rnum, 8}, {type, uint64}, {occurrence, optional}, {opts, []}],
     [{name, local_endpoint}, {fnum, 8}, {rnum, 9}, {type, {msg, zipkin_endpoint}}, {occurrence, optional}, {opts, []}],
     [{name, remote_endpoint}, {fnum, 9}, {rnum, 10}, {type, {msg, zipkin_endpoint}}, {occurrence, optional}, {opts, []}],
     [{name, annotations}, {fnum, 10}, {rnum, 11}, {type, {msg, zipkin_annotation}}, {occurrence, repeated}, {opts, []}],
     [{name, tags}, {fnum, 11}, {rnum, 12}, {type, {map, string, string}}, {occurrence, repeated}, {opts, []}],
     [{name, debug}, {fnum, 12}, {rnum, 13}, {type, bool}, {occurrence, optional}, {opts, []}],
     [{name, shared}, {fnum, 13}, {rnum, 14}, {type, bool}, {occurrence, optional}, {opts, []}]];
find_msg_def(zipkin_endpoint) ->
    [[{name, service_name}, {fnum, 1}, {rnum, 2}, {type, string}, {occurrence, optional}, {opts, []}],
     [{name, ipv4}, {fnum, 2}, {rnum, 3}, {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, ipv6}, {fnum, 3}, {rnum, 4}, {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, port}, {fnum, 4}, {rnum, 5}, {type, int32}, {occurrence, optional}, {opts, []}]];
find_msg_def(zipkin_annotation) -> [[{name, timestamp}, {fnum, 1}, {rnum, 2}, {type, fixed64}, {occurrence, optional}, {opts, []}], [{name, value}, {fnum, 2}, {rnum, 3}, {type, string}, {occurrence, optional}, {opts, []}]];
find_msg_def(zipkin_list_of_spans) -> [[{name, spans}, {fnum, 1}, {rnum, 2}, {type, {msg, zipkin_span}}, {occurrence, repeated}, {opts, []}]];
find_msg_def(zipkin_report_response) -> [];
find_msg_def(_) -> error.


find_enum_def('zipkin_span.Kind') -> [{'SPAN_KIND_UNSPECIFIED', 0}, {'CLIENT', 1}, {'SERVER', 2}, {'PRODUCER', 3}, {'CONSUMER', 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('zipkin_span.Kind', Value) -> 'enum_symbol_by_value_zipkin_span.Kind'(Value).


enum_value_by_symbol('zipkin_span.Kind', Sym) -> 'enum_value_by_symbol_zipkin_span.Kind'(Sym).


'enum_symbol_by_value_zipkin_span.Kind'(0) -> 'SPAN_KIND_UNSPECIFIED';
'enum_symbol_by_value_zipkin_span.Kind'(1) -> 'CLIENT';
'enum_symbol_by_value_zipkin_span.Kind'(2) -> 'SERVER';
'enum_symbol_by_value_zipkin_span.Kind'(3) -> 'PRODUCER';
'enum_symbol_by_value_zipkin_span.Kind'(4) -> 'CONSUMER'.


'enum_value_by_symbol_zipkin_span.Kind'('SPAN_KIND_UNSPECIFIED') -> 0;
'enum_value_by_symbol_zipkin_span.Kind'('CLIENT') -> 1;
'enum_value_by_symbol_zipkin_span.Kind'('SERVER') -> 2;
'enum_value_by_symbol_zipkin_span.Kind'('PRODUCER') -> 3;
'enum_value_by_symbol_zipkin_span.Kind'('CONSUMER') -> 4.


get_service_names() -> [span_service].


get_service_def(span_service) -> {{service, span_service}, [[{name, report}, {input, zipkin_list_of_spans}, {output, zipkin_report_response}, {input_stream, false}, {output_stream, false}, {opts, []}]]};
get_service_def(_) -> error.


get_rpc_names(span_service) -> [report];
get_rpc_names(_) -> error.


find_rpc_def(span_service, RpcName) -> find_rpc_def_span_service(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_span_service(report) -> [{name, report}, {input, zipkin_list_of_spans}, {output, zipkin_report_response}, {input_stream, false}, {output_stream, false}, {opts, []}];
find_rpc_def_span_service(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_list(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"zipkin.proto3.SpanService">>) -> span_service;
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin(span_service) -> <<"zipkin.proto3.SpanService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"zipkin.proto3.SpanService">>, <<"Report">>) -> {span_service, report};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins(span_service, report) -> {<<"zipkin.proto3.SpanService">>, <<"Report">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"zipkin.proto3.Span">>) -> zipkin_span;
fqbin_to_msg_name(<<"zipkin.proto3.Endpoint">>) -> zipkin_endpoint;
fqbin_to_msg_name(<<"zipkin.proto3.Annotation">>) -> zipkin_annotation;
fqbin_to_msg_name(<<"zipkin.proto3.ListOfSpans">>) -> zipkin_list_of_spans;
fqbin_to_msg_name(<<"zipkin.proto3.ReportResponse">>) -> zipkin_report_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(zipkin_span) -> <<"zipkin.proto3.Span">>;
msg_name_to_fqbin(zipkin_endpoint) -> <<"zipkin.proto3.Endpoint">>;
msg_name_to_fqbin(zipkin_annotation) -> <<"zipkin.proto3.Annotation">>;
msg_name_to_fqbin(zipkin_list_of_spans) -> <<"zipkin.proto3.ListOfSpans">>;
msg_name_to_fqbin(zipkin_report_response) -> <<"zipkin.proto3.ReportResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"zipkin.proto3.Span.Kind">>) -> 'zipkin_span.Kind';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('zipkin_span.Kind') -> <<"zipkin.proto3.Span.Kind">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'zipkin.proto3'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "zipkin.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["zipkin.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["zipkin"].


get_msg_containment("zipkin") -> [zipkin_annotation, zipkin_endpoint, zipkin_list_of_spans, zipkin_report_response, zipkin_span];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("zipkin") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("zipkin") -> [span_service];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("zipkin") -> [{span_service, report}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("zipkin") -> ['zipkin_span.Kind'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"zipkin.proto3.ListOfSpans">>) -> "zipkin";
get_proto_by_msg_name_as_fqbin(<<"zipkin.proto3.Endpoint">>) -> "zipkin";
get_proto_by_msg_name_as_fqbin(<<"zipkin.proto3.ReportResponse">>) -> "zipkin";
get_proto_by_msg_name_as_fqbin(<<"zipkin.proto3.Span">>) -> "zipkin";
get_proto_by_msg_name_as_fqbin(<<"zipkin.proto3.Annotation">>) -> "zipkin";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"zipkin.proto3.SpanService">>) -> "zipkin";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"zipkin.proto3.Span.Kind">>) -> "zipkin";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "file".
